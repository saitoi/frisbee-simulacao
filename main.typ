#import "@preview/touying:0.5.3": *
#import themes.university: *
#import "@preview/cetz:0.3.1"
#import "@preview/fletcher:0.5.1" as fletcher: node, edge
#import "@preview/ctheorems:1.1.2": *
#import "@preview/numbly:0.1.0": numbly
#import "@preview/codly:1.0.0": *

/* ******************** CONFIGURA√á√ïES ******************** */

#set text(lang: "pt")
#set math.equation(numbering: "(1)")
#show figure.caption: set text(size: 18pt)

#let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true))
#let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide)

#show: thmrules.with(qed-symbol: $square$)
#let theorem = thmbox("theorem", "Theorem", fill: rgb("#eeffee"))
#let observation = thmplain("observa√ß√£o", "Observa√ß√£o", fill: rgb("#f8f4a6"))
#let corollary = thmplain(
  "corollary",
  "Corollary",
  base: "theorem",
  titlefmt: strong
)
#let definition = thmbox("definition", "Definition", inset: (x: 1.2em, top: 1em))
#let example = thmplain("example", "Example").with(numbering: none)
#let proof = thmproof("proof", "Proof")

#show: university-theme.with(
  aspect-ratio: "16-9",
 // config-common(handout: true),
  config-info(
    title: [Frisbee],
    subtitle: [An√°lise Matem√°tica e F√≠sica],
    author: [Jo√£o Pedro Silva de Sousa #linebreak()
             Pedro Henrique Honorio Saito #linebreak()
             Marcos Henrique Junqueira
            ],
    date: datetime.today(),
    institution: [Universidade Federal do Rio de Janeiro],
    logo: emoji.frisbee,
  ),
)

#show: codly-init.with()

#codly(
  display-icon: false,
  languages: (
    py: (
      name: [Python], color: rgb("#efca08"),
      icon: "üêç"
    ),
  ),
)

#codly(zebra-fill: none, number-format: none)

#set heading(numbering: numbly("{1}.", default: "1.1"))

#title-slide()

/* ******************** SLIDES ******************** */

== Outline <touying:hidden>

#components.adaptive-columns(outline(title: [Sum√°rio], indent: 1em, depth: 1))

= Introdu√ß√£o

== Breve Hist√≥rico

- A hist√≥ria dos frisbees remonta ao final do s√©culo XIX, quando alunos da universidade de Yale arremessavam formas de torta da Firsbie Pie Company como uma brincadeira.

- Em 1958, Wham-O lan√ßou a marca de discos de pl√°stico voadores "Frisbee", e desde ent√£o o frisbee se tornou um brinquedo popular e at√© mesmo usado em modalidades esportivas, a exemplo do _Ultimate Frisbee_ e do _Golf Disc_

//talvez uma imagem aqui :)
#figure(
  image("images/frisbies-pies.jpg", width: 40%),
  caption: [Uma das formas de torta do Frisbie]
)

== Especifica√ß√£o do Problema //Estapa 1 da modelagem

- Modelar o movimento de um Frisbee que √© lan√ßado no ar com alta rota√ß√£o (_spin_).

- Como for√ßas atuando sobre o disco, vamos considerar

+ For√ßa da Gravidade sobre o disco
+ For√ßa de arrasto, que √© a resist√™ncia do ar ao movimento do disco.
+ For√ßa de Sustenta√ß√£o, relacionada √† aerodin√¢mica do disco.

- Considera-se um ambiente ideal sem vento em qualquer dire√ß√£o.

  Raz√£o: al√©m do arrasto, tamb√©m ter√≠amos de considerar for√ßas externas em outras dire√ß√µes, provocando torques, turbul√™ncias, e outras complica√ß√µes. 

- O _Frisbee_ ser√° modelado como um corpo r√≠gido em formato de disco, sim√©trico e de espessura desprez√≠vel.
// Corpo r√≠gido

== Objetivos

- Apresentar uma modelagem para o movimento do Frisbee sob as condi√ß√µes apresentadas.

- Introduzir os princ√≠pios da aerodin√¢mica do frisbee: o Princ√≠pio de Bernoulli e a In√©rcia Girosc√≥pica.

- Derivar as equa√ß√µes para o movimento do frisbee atrav√©s de equa√ß√µes diferenciais.

- Obter a solu√ß√£o do modelo de equa√ß√µes.

- Fazer compara√ß√µes com outros resultados

//decidir outros t√≥picos 

/* ************************************** MARCOS ************************************** */

= Princ√≠pio de Bernoulli

== Deriva√ß√£o

O princ√≠pio de Bernoulli busca descrever o comportamento de um fluido ideal ao longo de uma linha de corrente.

#definition[
  Uma linha de corrente √© uma linha cont√≠nua tra√ßada no fluido de forma que todos os seus pontos s√£o tangenciais √† velocidade.
]

#align(center)[#image("images/bernoulli/streamline-fluid.png")]

Podemos deriv√°-lo calculando a diferen√ßa do trabalho por um fluido em escoamento em duas partes diferentes de um cano, desprezando for√ßas de viscosidade.

#align(center)[#image("images/bernoulli/bernoulli-pipe.png")]

Primeiramente, temos que:

$ \d W &= F_1\d x_1‚àíF_2\d x_2 \
       &=p_1A_1\d x_1‚àíp_2A_2\d x_2 \
       &=p_1 \dV‚àíp_2 \d V \
       &=(p_1‚àíp_2)\dV
$

Sabemos, tamb√©m, que o trabalho realizado √© resultado de altera√ß√µes na energia cin√©tica e potencial do fluido.

A diferen√ßa das energias cin√©ticas nas duas se√ß√µes do tubo √©:

$ 
  \d K &= frac(1,2) m_2 v_2^2 ‚àí frac(1,2) m_1 v_1^2 \
       &= frac(1,2) rho \d V (v_2^2 - v_1^2)
$

Enquanto diferen√ßa das energias potenciais nas duas se√ß√µes √©:

$ 
  \d U &= m_2 g y_2 - m_1 g y_1 \
       &= rho \d V g(y_2 - y_1)
$

Substituindo na equa√ß√£o do trabalho, obtemos

$
  \d W &=(p_1‚àíp_2)\dV \
  (p_1‚àíp_2)\dV &= frac(1,2) rho \d V (v_2^2 - v_1^2) + rho \d V g(y_2 - y_1) \
$

Que, ao rearranjarmos, obtemos

$
  p_1 + frac(1,2) rho v_1^2 + rho g y_1 = p_2 + frac(1,2) rho v_2^2 + rho g y_2 
$ <eq:bernoulli>

Conclu√≠ndo que, para um fluido incompress√≠vel e sem fric√ß√£o, a combina√ß√£o de press√£o, energia cin√©tica e potencial √© constante n√£o apenas em rela√ß√£o ao tempo, mas tamb√©m para uma mesma linha de corrente.

$
  p + frac(1,2) rho v^2 + rho g y = text("constante") 
$

O princ√≠pio de Bernoulli nada mais √© que a equa√ß√£o de Bernoulli para fluxos em altura constante, refor√ßando que a medida que a velocidade do fluido aumenta, h√° uma queda de press√£o para a conserva√ß√£o da equa√ß√£o.

$
  p + frac(1,2) rho v^2 = text("constante")
$

== Aplica√ß√£o

No contexto do frisbee, o princ√≠pio de Bernoulli explica adequadamente a for√ßa de eleva√ß√£o observada.

#align(center)[#image("images/bernoulli/frisbee.gif")]

O ar fluindo ao longo da face convexa do frisbee tem maior velocidade do que o ar fluindo na face de baixo. Assim, cria-se uma regi√£o de baixa press√£o acima do frisbee que, justaposta √† regi√£o de baixo, ocasiona em uma for√ßa de eleva√ß√£o.

/* ************************************** SAITO ************************************** */

= In√©rcia Girosc√≥pica

== Defini√ß√£o

#definition[
  Resist√™ncia ao alterar o eixo de rota√ß√£o de um corpo rotativo. Essa resist√™ncia √© igual em m√≥dulo √† magnitude do momento angular do corpo.
]

#v(48pt)

A in√©rcia girosc√≥pica garante a estabilidade no movimento do _Frisbee_. Com uma *velocidade angular* suficientemente elevada $bold(w)$, o _Frisbee_ tende a manter seu eixo de rota√ß√£o est√°vel.

== Demonstra√ß√£o

_Proof :_ Considere uma part√≠cula a uma dist√¢ncia $r$ da origem e com momento linear $p$. O momento angular deste ponto em rela√ß√£o √† origem √© definido como:

$
upright(bold(L)) &= bold(r) times bold(p) \
                 &= bold(r) times (m bold(v)) \
                 &= m (bold(r) times bold(v))
$

#pagebreak()

Para um corpo r√≠gido em rota√ß√£o com velocidade angular $bold(w)$, a velocidade $bold(v)$ da part√≠cula na posi√ß√£o $bold(x)$ √©:

$
bold(v) = bold(w) times bold(r)
$

Assim, o momento angular do corpo ser√° dado por:

$
upright(bold(L)) &= m (bold(r) times (bold(w) times bold(r)))
$

#pause

Pela *identidade do produto vetorial duplo*, temos que:

$
upright(bold(L)) &= m ((bold(r^t) dot bold(r))w - (bold(r^t) dot bold(w))r)
$

#pagebreak()

Como $(bold(r^t) dot bold(w))$ √© uma fun√ß√£o real, podemos reescrev√™-la como:

$
upright(bold(L)) &= m ((bold(r^t) dot bold(r))bold(w) - (bold(r) dot bold(r^t))bold(w)) \
                 &= m((bold(r^t) dot bold(r))I - (bold(r) dot bold(r^t))) dot bold(w) \
$

Assim, a contribui√ß√£o diferencial de uma massa $\dm$ para o momento angular ser√°:

$
\d upright(bold(L)) &= \dm ((bold(r^t) dot bold(r))I - (bold(r) dot bold(r^t))) dot bold(w) \
$ <eq:dm>

#v(31pt)

*Nota*: Em um corpo r√≠gido, todas as part√≠culas compartilham a mesma velocidade angular $bold(w)$.

#pagebreak()

Integrando a equa√ß√£o @eq:dm obteremos que:

$
upright(bold(L)) = upright(bold(I)) dot bold(w)
$ <eq:momento_angular>

Em que o termo $upright(bold(I))$ corresponde ao tensor de in√©rcia do corpo, expresso por:

#v(14pt)

$
upright(bold(I)) = integral_V ((bold(r^t) dot bold(r))I - (bold(r) dot bold(r^t))) \dm
$ <eq:tensor>

#v(26pt)

// CORRIGIR AQUI
*Nota:* Na apostila, o tensor de in√©rcia √© derivado a partir da posi√ß√£o das part√≠culas na base m√≥vel, denotado por $upright(bold(B))$.

#pagebreak()

_Relembrando_ : O torque $bold(tau)$ sobre uma part√≠cula √© a taxa de varia√ß√£o do momento angular, dado por:

$
bold(tau) = dot(upright(bold(L)))
$ <eq:torque>

Portanto, substituindo na @eq:momento_angular obtemos:

$
bold(tau) = upright(bold(dot(I))) dot bold(w) + upright(bold(I)) dot bold(dot(w)) 
$ <eq:torque_expandido>

Assim, um torque $bold(tau)$ aplicado a um corpo r√≠gido causa duas mudan√ßas:

#v(18pt)

// Acho que esse nome √© diferente
+ Mudan√ßa da orienta√ß√£o do corpo em rela√ß√£o ao eixo de rota√ß√£o.

+ Varia√ß√£o no momento angular do corpo.

#pagebreak()

Na pr√°tica, o _Frisbee_ rotaciona em rela√ß√£o a um eixo particular cujo *momento de in√©rcia* √© m√°ximo. A representa√ß√£o cl√°ssica do _Frisbee_ segue a baixo:

#let frisbee-canvas = cetz-canvas({
  import cetz.draw: *

  // Frisbee
  circle((0,0),
         radius: (112pt, 26pt),
         fill: yellow,
         stroke: 1.1pt + black,
  )
  circle((0,.2),
         radius: (98pt, 21pt),
         fill: yellow,
         stroke: 1.7pt + rgb("#CCA43B"),
  )

  // Eixo de Rota√ß√£o 1
  content((1, 2), $bold(w)$)
  line((0,0.3), (0, 2.5), stroke: (dash: "dashed"))
  line((0,-.93), (0, -2.2), stroke: (dash: "dashed"))

  // Eixo de Rota√ß√£o 2
  line((-5.28,0), (-4, 0), length: 6pt, stroke: (dash: "dashed"))
  line((5.30,0), (4, 0), length: 6pt, stroke: (dash: "dashed"))

  // Eixo de Rota√ß√£o 3
  line((-4.30,1.15), (-2.66, 0.71), length: 6pt, stroke: (dash: "dashed"))
  line((2.66,-0.71), (3.93, -1.1), length: 6pt, stroke: (dash: "dashed"))

  // massa dm 
  content((4.4, .82), $\dm$, font: 1pt)
  circle((4,0),
         radius: (.1,.1),
         fill: yellow,
         stroke: 1pt + black,
  )
})

#align(center)[
#figure(
  frisbee-canvas,
  caption: [Frisbee e seus tr√™s eixos principais],
)
]

#v(9pt)

Como podemos notar, o _Frisbee_ possui tr√™s eixos de rota√ß√£o principais, de modo que um deles possui momento de in√©rcia m√°ximo.

#pagebreak()

Analisando de cima, notamos que o momento de in√©rcia m√°ximo est√° atrelado ao eixo de rota√ß√£o vertical na figura √† direita.

#let frisbee-1 = cetz-canvas(length: 10cm, {
  import cetz.draw: *
  // Outer circle
  circle((5cm, 5cm), radius: 4cm, fill: yellow, stroke: 1.1pt + black)
  // Inner circle
  circle((5cm, 5cm), radius: 3.5cm, fill: yellow, stroke: 1.7pt + rgb("#CCA43B"))

  line((0.5,1),
       (0.5, .0),
       stroke: (dash: "dashed"))
  line((5cm,6.7cm),
       (8.63cm, 6.7cm),
       stroke: 1pt + black)
})

#let frisbee-2 = cetz-canvas(length: 10cm, {
  import cetz.draw: *
  // Outer circle
  circle((5cm, 5cm), radius: 4cm, fill: yellow, stroke: 1.1pt + black)
  // Inner circle
  circle((5cm, 5cm), radius: 3.5cm, fill: yellow, stroke: 1.7pt + rgb("#CCA43B"))
  content((5cm, 5cm), $‚äó$)
  line((0.5,1),
       (0.5, .0),
       stroke: none)
})

#v(-9pt)

#align(center)[
#scale(94%,
figure(
  grid(
    columns: 2,
    gutter: 5em,
    frisbee-1,
    frisbee-2
  ),
  caption: [Frisbee visto de cima e dois eixos de rota√ß√£o principais.])
)
]

#pagebreak()

#v(11pt)

Assim, simplificaremos o tensor de in√©rcia do _Frisbee_, considerando apenas o *escalar* $I$ para represent√°-lo.

#v(17pt)

_Relembrando :_ O tensor de in√©rcia do _Frisbee_ √© calculado como:

#v(14pt)

$
bold(upright(I)) = mat(
  delim: "[",
  frac(M R^2,2),0,0;
  0,frac(M R^2,2),0;
  0,0,frac(M R^2,4);
)
$ <eq:tensor_frisbee>

#v(14pt)

*Nota*: Isso ocorre ao calcular a matriz do tensor de in√©rcia no referencial m√≥vel. A abordagem anterior impede sua diagonaliza√ß√£o.


#pagebreak()

#v(23pt)

Para compreendermos o conceito de *In√©rcia Girosc√≥pica* precisamos antes da seguinte hip√≥tese:

#v(63pt)

#align(center)[
  #block(
    width: 67%,
    height: 91pt,
    stroke: 2pt + black,
    inset: 19pt,
    [
  _Hip√≥tese :_ Torque √© aplicado perpendicularmente ao momento angular.
    ]
  )
]

#pagebreak()

#v(23pt)

Retornando √† @eq:torque_expandido, conseguimos simplific√°-la:

$
bold(tau) &= dot(upright(bold(I))) dot bold(w) + cancel(upright(bold(I)) dot dot(bold(w))) \
bold(tau) &= dot(upright(bold(I))) dot bold(w)
$

O torque pode alterar a orienta√ß√£o do corpo em rela√ß√£o ao eixo de rota√ß√£o, reduzindo o *momento de in√©rcia*.

#v(17pt)

No entanto, pelo princ√≠pio de conserva√ß√£o da energia cin√©tica $frac(I w¬≤,2)$, essa redu√ß√£o √© imposs√≠vel.

#pagebreak()

#v(23pt)

Assim, √© preciso que o corpo mantenha seu eixo de rota√ß√£o, de modo que a
magnitude de $bold(upright(I)) dot bold(w)$ seja constante, o que ocorre com uma
*velocidade angular elevada*.

Portanto, vamos escrever o momento angular como:

#v(10pt)

$
bold(upright(L)) = I w bold(hat(w))
$

#v(10pt)

Em que $I$ √© a magnitude do momento de in√©rcia m√°ximo, $w$ a magnitude da
velocidade angular, e $bold(hat(w))$ o eixo de rota√ß√£o.

#pagebreak()

#v(13pt)

Aplicando a @eq:torque na √∫ltima express√£o, encontramos:

$
bold(tau) &= bold(upright(dot(L))) \
bold(tau) &= L frac(\d bold(hat(w)),\d t)
$ <eq:inercia_giroscopica>

Portanto, o torque varia o eixo de rota√ß√£o e √© inversamente proporcional √†
magnitude do momento angular $L$, que representa a *in√©rcia girosc√≥pica*.

/* ************************************** JPIGGERS ************************************** */

= Modelagem

== For√ßas Aerodin√¢micas

#v(13pt)

Seja $d_1$ o vetor unit√°rio na dire√ß√£o da proje√ß√£o do vetor velocidade $bold(v)$ no plano do disco. Seja $d_2$ outro vetor unit√°rio no plano do disco que forma uma base com $d_1$, e $d_3 = d_1 times d_2$ o vetor normal ao plano do disco.

Sob a hip√≥tese de que o movimento do disco se d√° em um plano, ent√£o ${d_1, d_3}$ forma uma base para esse plano.

Sobre o disco agem a for√ßa peso, de sustenta√ß√£o e de arrasto. Os vetores das for√ßas de arrasto e sustenta√ß√£o sempre se mant√©m perpendiculares entre si, enquanto que o peso aponta para o solo.

#figure(
  image("images/modelagem/disco-hummel.png"),
  caption: [Representa√ß√£o das for√ßas aerodin√¢micas]
)

#pagebreak()

#v(16pt)

Por um exerc√≠cio trigonom√©trico, podemos decompor as for√ßas aerodin√¢micas de modo que

#v(16pt)

$
bold(L) &= (L sin alpha) bold(d_1) + (L cos alpha)bold(d_3) \
bold(D) &= (-D cos alpha) bold(d_1) + (D sin alpha) bold(d_3)
$

#v(14pt)

Onde $bold(L)$ e $bold(D)$ s√£o, respectivamente, os vetores das *for√ßas de sustenta√ß√£o* e de *arrasto.* Desse modo, a for√ßa aerodin√¢mica que age sobre o disco √©

$
bold(F)_"ad" = (L sin alpha - D cos alpha) bold(d_1) + (L cos alpha + D sin alpha) bold(d_3)
$

#pagebreak()


== Determinando as For√ßas Aerodin√¢micas

A *for√ßa de arrasto* geralmente √© modelada como

$
D = (C_d rho A v^2) / 2
$

Onde $C_d$ √© o coeficiente de arrasto, $rho$ √© a densidade do ar, $A$ a √°rea da superf√≠cie de arrasto (√Årea do _Frisbee_) e $v$ a velocidade relativa do flu√≠do. Como estamos considerando o ar estacion√°rio, ent√£o o m√≥dulo da velocidade √© igual ao do frisbee.

O coeficiente $C_d$ √© dado como fun√ß√£o do √¢ngulo de ataque

$
C_d = C_d_0 + C_d_alpha alpha^2
$ 

Onde $C_d_alpha$, $C_d_0$ e $alpha_0$ s√£o coeficientes que dependem do disco.

- J√° a *for√ßa de sustenta√ß√£o* pode ser modelada a partir do Princ√≠pio de Bernoulli. Pela equa√ß√£o abaixo,

$
 p_1 + frac(1,2) rho v_1^2 + rho g y_1 = p_2 + frac(1,2) rho v_2^2 + rho g y_2 
$

podemos obter, sob a hip√≥tese de que a espessura do disco √© desprez√≠vel, que
$
p_1 + frac(1,2) rho v_1^2 =  p_2 + frac(1,2) rho v_2^2
$
// We will also asÔøæsume that the velocity of the air flowing above is directly proportional to the velocity of the air below because the difference in path length is constant  (n√£o entendi muito bem)

Considerando que a velocidade do ar acima do disco √© diretamente proporcional √† que flui abaixo, temos $v_1 = C v_2$.

Assim, pela defini√ß√£o de press√£o $P=F/A$, temos que $(p_1 - p_2) = L / A$.

// Informar qual das velocidades est√° atrelada a qual regi√£o do disco

#v(19pt)

$
p_1 + 1/2 rho v_1^2 &= p_2 + 1/2 rho v_2^2 \
L/ A + 1/2 rho C^2 v^2 &= 1/2 rho v^2 \
frac(L,A) &= frac(1,2) rho v^2 A (1 - C^2) \
$

#pagebreak()

#v(19pt)

Incorporando $C$ ao *coeficiente de sustenta√ß√£o* denotado por $C_L$, obtemos:

$
&L = (rho v^2 A C_L) / 2 \
$

De modo que $C_L$ √© uma fun√ß√£o do √¢ngulo de ataque.

#v(16pt)

$
C_L = C_L_0 + C_L_alpha alpha 
$

#v(16pt)

*Nota*: Os coeficientes $C_L_0$ e $C_L_alpha$ s√£o constantes que dependem das propriedades f√≠sicas do _Frisbee_.

== Obtendo a For√ßa Total

- A for√ßa aerodin√¢mica foi escrita em termos da base de ${d_1, d_3}$. Para conseguimos as equa√ß√µes do movimento nos eixos x e z, ent√£o precisamos escrever essa for√ßa em termos da base can√¥nica do plano x-z.

- Considere que o a inclina√ß√£o entre $d_1$ e o eixo x seja $phi$. Desse modo, se $bold(F')_"ad"$ √© a for√ßa aerodin√¢mica na base can√¥nica, ent√£o
$
bold(F')_"ad" = Q F_"ad"
$
onde $Q$ √© uma rota√ß√£o de √¢ngulo $phi$. Logo, para obter a for√ßa aerodin√¢mica na base can√¥nica, basta computarmos $Q F_"ad"$.

#pagebreak()

$
bold(F')_"ad" = mat(delim: "[", cos phi, -sin phi; sin phi, cos phi) vec(delim: "[", L sin alpha - D cos alpha, L cos alpha + D sin alpha ) \

bold(F')_"ad" = vec(delim: "[", (L sin alpha - D cos alpha)cos phi -   (L cos alpha + D sin alpha) sin phi, (L sin alpha - D cos alpha) sin phi + ( L cos alpha + D sin alpha) cos phi)
$
Abrindo as express√µes e usando propriedades trigonom√©tricas, obtemos
$
bold(F')_"ad" = 1/2 A rho v^2 vec( delim: "[", C_L sin (alpha - phi) - C_D cos (alpha - phi),  C_L cos(alpha - phi) + C_D sin (alpha - phi) )
$

#pagebreak()

#v(14pt)

Se $F_x$ e $F_z$ s√£o as for√ßas nas componentes horizontal e vertical respectivamente, ent√£o

$
F_x &= 1/2 A rho v^2 (C_L sin (alpha - phi) - C_D cos (alpha - phi)) \
F_z &=  1/2 A rho v^2 (C_L cos(alpha - phi) + C_D sin (alpha - phi)) - m g
$
== Obtendo as Equa√ß√µes do Modelo

*Hip√≥tese*: _O disco gira com momento angular o suficiente para manter uma trajet√≥ria est√°vel e resistir a inclina√ß√µes ao longo de sua trajet√≥ria._

- A hip√≥tese acima nos permite considerar $phi$ constante ao longo de todo o trajeto do disco.

*Hip√≥tese*: _O fluxo relativo de ar na vertical √© desprez√≠vel em rela√ß√£o ao da horizontal_

- Essa hip√≥tese por sua vez gera as seguintes implica√ß√µes no modelo
  
  + Considerando o ar estacion√°rio, o m√≥dulo da velocidade do fluxo de ar relativo nas f√≥rmulas das for√ßas de sustenta√ß√£o e arrasto ser√° igual ao m√≥dulo da velocidade horizontal do disco: $v = dot(x)$.
  
  + Se consideramos apenas o fluxo de ar na horizontal, ent√£o o √¢ngulo de ataque $alpha$ ser√° igual a inclina√ß√£o entre o vetor $d_1$ no plano do disco e o eixo horizontal, ou seja, igual √† inclina√ß√£o do plano do disco: $alpha = phi$, e o disco mant√©m um √¢ngulo de ataque constante ao longo da trajet√≥ria.
  
#pagebreak()

#v(16pt)

Com essas novas hip√≥teses, as equa√ß√µes do movimento se reduzem para

$
m dot.double(x) &= - (C_D A rho dot(x)^2)/2 \
m dot.double(z) &=  (C_L A rho dot(x)^2)/2 - m g
$ <eq:accy>

Com isso, obtemos o seguinte sistema de EDOs de segunda ordem.

$
cases(
  dot.double(x) = -(C_D A rho)/(2m)dot(x)^2 \
  dot.double(z) = (C_L A rho)/(2m) dot(x)^2 - g
)
$

== Resumo das Hip√≥teses

+ O _Frisbee_ √© um corpo r√≠gido, sim√©trico e com espessura desprez√≠vel em rela√ß√£o ao di√¢metro.

+ O lan√ßamento ocorre sem vento, torques externos, e em um flu√≠do incompress√≠vel.

+ Sobre o disco s√≥ agem as for√ßa da gravidade e aerodin√¢micas de arrasto e sustenta√ß√£o.

+ O disco √© lan√ßado com componente da velocidade lateral igual a zero.

+ O disco √© lan√ßado com momento angular suficiente para manter uma trajet√≥ria est√°vel.

+ O fluxo de ar na vertical √© desprez√≠vel em rela√ß√£o ao da horizontal.

= Resolvendo o Modelo //etapa 4

== Sistema de 1¬™ ordem

#v(10pt)

O sistema de segunda ordem, dependente de $dot(x)$ e $dot(z)$, pode ser reduzido para primeira ordem com $dot(x) = v_x$ e $dot(y) = v_z$.

Al√©m disso, denotando os termos $(C_D A rho) / (2m)$ e $(C_L A rho) / (2m)$ por $k_D$ e $k_L$.

// O sistema s√≥ envolve a segunda e a primeira derivada da fun√ß√£o. Dessa forma podemos transformar num sistema de primeira ordem fazendo uma troca de vari√°veis: $dot(x) = v_x$, $dot(y) = v_y$. Al√©m disso, vamos denotar os termos $(C_D A rho) / (2m)$ e $(C_L A rho) / (2m)$ por $k_D$ e $k_L$.

#v(16pt)

$
cases(dot(v)_x = -k_D v_x^2 \
      dot(v)_z = k_L v_x^2)
$

#pagebreak()

#v(10pt)

Aplicando a separa√ß√£o de vari√°veis na primeira

$
-1/v_x = -k_D t + C_1 \
v_x = 1/(k_D t + C_1) 
$

Integrando os dois membros e lembrando que $dot(x) = v_x$, obtemos

$
x = 1/k_D ln|k_D t + C_1| + C_2
$

#pagebreak()

Agora resolvendo para para $v_y$
$
integral dot(v)_z d t = integral (k_L/(k_D t + C_1)^2 - g) d t \
v_z = -k_L/(k_D (k_D t + C_1)) - g t + C_3
$
Integrando mais uma vez, obtemos
$
z = -k_L/k_D^2 dot ln abs(k_D t + C_1) - (g t^2)/2  + C_3 t + C_4
$

#pagebreak()

Solu√ß√£o Anal√≠tica do modelo:
$
cases(x = 1/k_D ln abs(k_D t + C_1) + C_2 \ z = -k_L/k_D^2 dot ln abs(k_D t + C_1) - (g t^2)/2  + C_3 t + C_4)
$

Ao passo que as constantes de integra√ß√£o s√£o dada em fun√ß√£o das condi√ß√µes iniciais $x_0, y_0, v_x_0, v_y_0$

#v(10pt)

$
mat(
  delim: #none,
  align: #left,
  C_1 = 1/v_x_0, C_2 = x_0 - 1/k_D ln abs(1/v_x_0) ;
  C_3 = v_y_0 + k_L/k_D dot v_x_0, C_4 = y_0 + k_L/k^2_D ln abs(1/v_x_0);
)
$

= Simula√ß√£o

== Vari√°veis

#v(10pt)

Primeiramente, vamos definir as vari√°veis:

#let code-font-size = 16.81pt

#text(size: code-font-size)[
  ```python
  # Condi√ß√µes iniciais
  x0 = 0                    # Posi√ß√£o inicial no eixo x (m)
  y0 = 1                    # Posi√ß√£o inicial no eixo y (m)
  vx0 = 16                  # Velocidade inicial no eixo x (m/s)
  vy0 = 0                   # Velocidade inicial no eixo y (m/s)
  a = np.radians(10)        # √Çngulo de ataque inicial em radianos (convers√£o de 10 graus)
  
  # Propriedades F√≠sicas
  d = 0.22                  # Di√¢metro do frisbee (m)
  m = 0.175                 # Massa do frisbee (kg)
  rho = 1.23                # Densidade do ar (kg/m¬≥)
  g = 9.81                  # Acelera√ß√£o da gravidade (m/s¬≤)
  A = np.pi * (d / 2) ** 2  # √Årea frontal do frisbee (m¬≤)
  ```
]

#pagebreak()

#v(10pt)

Definindo os coeficientes aerodin√¢micos:

#text(size: code-font-size)[
  ```python
  # Coeficientes aerodin√¢micos
  CD0 = 0.08           # Coeficiente de arrasto (adimensional)
  CDa = 2.72           # Varia√ß√£o do arrasto com o √¢ngulo de ataque (adimensional)
  CL0 = 0.15           # Coeficiente de sustenta√ß√£o (adimensional)
  CLa = 1.4            # Varia√ß√£o da sustenta√ß√£o com o √¢ngulo de ataque (adimensional)
  a0 = np.radians(-4)  # √Çngulo de ataque de refer√™ncia para o arrasto (em radianos)
```
]

#pagebreak()

#v(13pt)

Fun√ß√µes para a encapsular as constantes nos termos $k_l$ e $k_d$ atrelados, respectivamente, √† sustenta√ß√£o e ao arrasto:

#text(size: code-font-size)[
```py
  def KD(a: np.radians):
      CD = CD0 + CDa * (a - a0) ** 2
      return CD * A * rho / (2 * m)
  
  def KL(a: np.radians):
      CL = CL0 + CLa * a
      return CL * A * rho / (2 * m)

kl = KL(a)
kd = KD(a)
```
]

#pagebreak()

#v(13pt)

Constantes de Integra√ß√£o e fun√ß√µes param√©tricas para a posi√ß√£o do _Frisbee_ ao longo do tempo:

#text(size: code-font-size)[
```py
C1 = 1 / vx0                                # Velocidade inicial no eixo x (s/m)
C2 = x0 - 1 / kd * np.log(np.abs(C1))       # Posi√ß√£o inicial no eixo x (m)
C3 = vy0 + kl / kd * vx0                    # Velocidade inicial no eixo y (m/s)
C4 = y0 + kl / kd**2 * np.log(np.abs(C1))   # Posi√ß√£o inicial no eixo y (m)

x = lambda t: 1 / kd * np.log(np.abs(kd * t + C1)) + C2
y = lambda t: -kl / kd**2 * np.log(np.abs(kd * t + C1)) - g / 2 * t**2 + C3 * t + C4
```
]

#pagebreak()

#v(13pt)

Mapeamento da trajet√≥ria em um `CSV`:

#text(size: code-font-size)[
```py
delta_t = 0.01
t = 0.01
x_pos, y_pos = np.array([x0]), np.array([y0])
with open("frisbee_ours.csv", "w+") as csvfile:
    csvfile.write('t,x,y\n')          # Header do CSV
    while y(t) >= 0:
        x_v = x(t)
        y_v = y(t)
        x_pos = np.append(x_pos, x_v)
        y_pos = np.append(y_pos, y_v)
        t += delta_t
        csvfile.write(f"{t:.4f},{x_v},{y_v}\n")
```
]

== Gr√°ficos

#let fig-size = 79.61%

#figure(
  image("images/test-1/frisbee_ours_vel_18_ang_5.png", width: fig-size),
  caption: [Trajet√≥ria do _Frisbee_ com velocidade inicial 18 m/s e $alpha$ = 5¬∫]
)

#pagebreak()

#figure(image("images/test-2/frisbee_our_vel_18_ang_75.png", width: fig-size),
  caption: [Trajet√≥ria do _Frisbee_ com velocidade inicial 18 m/s e $alpha$ = 7.5¬∫]
)

#pagebreak()

#figure(image("images/test-3/frisbee_ours.png", width: fig-size),
  caption: [Trajet√≥ria do _Frisbee_ com velocidade inicial 14 m/s e $alpha$ = 0¬∫]
)

= Compara√ß√£o

== Solu√ß√£o  _Physics of Frisbee_

#figure(image("images/comparisons/frisbee_comparison_ang_0_vel_14.png", width: fig-size),
  caption: [Trajet√≥ria do _Frisbee_ com velocidade inicial 14 m/s e $alpha$ = 0¬∫]
)

#pagebreak()

== Experimento

#figure(image("images/experiment/saito-experimento.png", width: fig-size),
  caption: [Captura do _Tracker_ durante lan√ßamento do _Frisbee_.]
)

#pagebreak()

#figure(image("images/experiment/tracker-experiment.png", width: fig-size),
  caption: [Trajet√≥ria do _Frisbee_ com velocidade inicial 5.6 m/s e $alpha$ = 0¬∫]
)

#pagebreak()

== Dados do Experimento

#let styled_table = table.with(
  columns: 2,
  align: center,
  stroke: (x, y) => if y == 0 { (bottom: 2.5pt + black) } else { none },
  inset: 4pt,
)

#figure(
  table(
    columns: (1fr, 1fr),
    rows: 38pt,
    inset: 8.4pt,
    align: (center, center),
    table.header([*Vari√°vel*], [*Valores*]),
    [$x_0$], [$0.335 plus.minus 0.005$ m],
    [$y_0$], [$1.358 plus.minus 0.005$ m],
    [$v_0$], [$5.673 plus.minus 0.0707$ m/s],
    [massa], [$0.080 plus.minus 0.001$ kg],
    [di√¢metro], [$0.21 plus.minus 0.005$ m],
    [√¢ngulo de ataque], [3¬∫],
    [acelera√ß√£o da gravidade], [9.81 m/s¬≤],
    [densidade do ar], [1.23 kg/m¬≥],
  ),
  caption: [Dados coletados no _Tracker_ e incertezas dos aparelhos de medi√ß√£o.]
)

#pagebreak()

#figure(image("images/comparisons/frisbee_comparison_experiment_all_models.png", width: fig-size),
  caption: [Trajet√≥ria do _Frisbee_ com velocidade inicial 5.657 m/s e $alpha approx 3 degree$.]
)

#pagebreak()

#set text(size: 22pt)
#bibliography(
  "ref.bib",
  full: true, 
  style: "thieme"
)
